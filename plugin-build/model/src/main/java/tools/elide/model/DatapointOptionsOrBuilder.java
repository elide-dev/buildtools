// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elide/model/model.proto

package tools.elide.model;

public interface DatapointOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:model.DatapointOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Sets the visibility options for this data point. Depending on these options, a property or model may be exposed to
   * invoking code, protected from rewriting, and so on.
   * </pre>
   *
   * <code>.model.Visibility visibility = 1;</code>
   * @return The enum numeric value on the wire for visibility.
   */
  int getVisibilityValue();
  /**
   * <pre>
   * Sets the visibility options for this data point. Depending on these options, a property or model may be exposed to
   * invoking code, protected from rewriting, and so on.
   * </pre>
   *
   * <code>.model.Visibility visibility = 1;</code>
   * @return The visibility.
   */
  tools.elide.model.Visibility getVisibility();

  /**
   * <pre>
   * Whether this data point (model or field or enum, etc) should be considered "required" for this model to be valid.
   * This setting is applied in various circumstances, usually when data crosses API boundaries.
   * </pre>
   *
   * <code>bool required = 2;</code>
   * @return The required.
   */
  boolean getRequired();

  /**
   * <pre>
   * Whether this property contains a "concrete" sub-message, in which case, its properties are lifted to the parent
   * entity. During decoding, a property is added to indicate the concrete selection made. This is usually combined with
   * generic types in a one-of field, for instance, in `MenuProduct`.
   * </pre>
   *
   * <code>bool concrete = 3;</code>
   * @return The concrete.
   */
  boolean getConcrete();

  /**
   * <pre>
   * Indicate to the data storage engine that a given field is ephemeral, and should not be stored, but rather held with
   * a calculated value for use in systems upstream from the data storage layer.
   * </pre>
   *
   * <code>bool ephemeral = 4;</code>
   * @return The ephemeral.
   */
  boolean getEphemeral();
}
