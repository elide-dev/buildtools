// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elide/base/language.proto

package tools.elide.base;

/**
 * <pre>
 * Specifies a given language, along with a nationality for that language.
 * </pre>
 *
 * Protobuf type {@code base.LanguageSpec}
 */
public final class LanguageSpec extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:base.LanguageSpec)
    LanguageSpecOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LanguageSpec.newBuilder() to construct.
  private LanguageSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LanguageSpec() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LanguageSpec();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LanguageSpec(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();
            selectionCase_ = 1;
            selection_ = rawValue;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            selectionCase_ = 2;
            selection_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();
            modifierCase_ = 3;
            modifier_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            modifierCase_ = 4;
            modifier_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return tools.elide.base.BaseLanguage.internal_static_base_LanguageSpec_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return tools.elide.base.BaseLanguage.internal_static_base_LanguageSpec_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            tools.elide.base.LanguageSpec.class, tools.elide.base.LanguageSpec.Builder.class);
  }

  private int selectionCase_ = 0;
  private java.lang.Object selection_;
  public enum SelectionCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    LANGUAGE(1),
    ISO_LANGUAGE(2),
    SELECTION_NOT_SET(0);
    private final int value;
    private SelectionCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SelectionCase valueOf(int value) {
      return forNumber(value);
    }

    public static SelectionCase forNumber(int value) {
      switch (value) {
        case 1: return LANGUAGE;
        case 2: return ISO_LANGUAGE;
        case 0: return SELECTION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SelectionCase
  getSelectionCase() {
    return SelectionCase.forNumber(
        selectionCase_);
  }

  private int modifierCase_ = 0;
  private java.lang.Object modifier_;
  public enum ModifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    ISO_COUNTRY(3),
    DIALECT(4),
    MODIFIER_NOT_SET(0);
    private final int value;
    private ModifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ModifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static ModifierCase forNumber(int value) {
      switch (value) {
        case 3: return ISO_COUNTRY;
        case 4: return DIALECT;
        case 0: return MODIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ModifierCase
  getModifierCase() {
    return ModifierCase.forNumber(
        modifierCase_);
  }

  public static final int LANGUAGE_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Enumerated language specifier.
   * </pre>
   *
   * <code>.base.Language language = 1;</code>
   * @return Whether the language field is set.
   */
  public boolean hasLanguage() {
    return selectionCase_ == 1;
  }
  /**
   * <pre>
   * Enumerated language specifier.
   * </pre>
   *
   * <code>.base.Language language = 1;</code>
   * @return The enum numeric value on the wire for language.
   */
  public int getLanguageValue() {
    if (selectionCase_ == 1) {
      return (java.lang.Integer) selection_;
    }
    return 0;
  }
  /**
   * <pre>
   * Enumerated language specifier.
   * </pre>
   *
   * <code>.base.Language language = 1;</code>
   * @return The language.
   */
  public tools.elide.base.Language getLanguage() {
    if (selectionCase_ == 1) {
      @SuppressWarnings("deprecation")
      tools.elide.base.Language result = tools.elide.base.Language.valueOf(
          (java.lang.Integer) selection_);
      return result == null ? tools.elide.base.Language.UNRECOGNIZED : result;
    }
    return tools.elide.base.Language.ENGLISH;
  }

  public static final int ISO_LANGUAGE_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
   * matter but upper-casing should be preferred for consistency.
   * </pre>
   *
   * <code>string iso_language = 2;</code>
   * @return Whether the isoLanguage field is set.
   */
  public boolean hasIsoLanguage() {
    return selectionCase_ == 2;
  }
  /**
   * <pre>
   * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
   * matter but upper-casing should be preferred for consistency.
   * </pre>
   *
   * <code>string iso_language = 2;</code>
   * @return The isoLanguage.
   */
  public java.lang.String getIsoLanguage() {
    java.lang.Object ref = "";
    if (selectionCase_ == 2) {
      ref = selection_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (selectionCase_ == 2) {
        selection_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
   * matter but upper-casing should be preferred for consistency.
   * </pre>
   *
   * <code>string iso_language = 2;</code>
   * @return The bytes for isoLanguage.
   */
  public com.google.protobuf.ByteString
      getIsoLanguageBytes() {
    java.lang.Object ref = "";
    if (selectionCase_ == 2) {
      ref = selection_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (selectionCase_ == 2) {
        selection_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ISO_COUNTRY_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
   * </pre>
   *
   * <code>string iso_country = 3;</code>
   * @return Whether the isoCountry field is set.
   */
  public boolean hasIsoCountry() {
    return modifierCase_ == 3;
  }
  /**
   * <pre>
   * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
   * </pre>
   *
   * <code>string iso_country = 3;</code>
   * @return The isoCountry.
   */
  public java.lang.String getIsoCountry() {
    java.lang.Object ref = "";
    if (modifierCase_ == 3) {
      ref = modifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (modifierCase_ == 3) {
        modifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
   * </pre>
   *
   * <code>string iso_country = 3;</code>
   * @return The bytes for isoCountry.
   */
  public com.google.protobuf.ByteString
      getIsoCountryBytes() {
    java.lang.Object ref = "";
    if (modifierCase_ == 3) {
      ref = modifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (modifierCase_ == 3) {
        modifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DIALECT_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Dialect to specify as part of this language spec, based on a simple two-character string.
   * </pre>
   *
   * <code>string dialect = 4;</code>
   * @return Whether the dialect field is set.
   */
  public boolean hasDialect() {
    return modifierCase_ == 4;
  }
  /**
   * <pre>
   * Dialect to specify as part of this language spec, based on a simple two-character string.
   * </pre>
   *
   * <code>string dialect = 4;</code>
   * @return The dialect.
   */
  public java.lang.String getDialect() {
    java.lang.Object ref = "";
    if (modifierCase_ == 4) {
      ref = modifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (modifierCase_ == 4) {
        modifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Dialect to specify as part of this language spec, based on a simple two-character string.
   * </pre>
   *
   * <code>string dialect = 4;</code>
   * @return The bytes for dialect.
   */
  public com.google.protobuf.ByteString
      getDialectBytes() {
    java.lang.Object ref = "";
    if (modifierCase_ == 4) {
      ref = modifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (modifierCase_ == 4) {
        modifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (selectionCase_ == 1) {
      output.writeEnum(1, ((java.lang.Integer) selection_));
    }
    if (selectionCase_ == 2) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, selection_);
    }
    if (modifierCase_ == 3) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, modifier_);
    }
    if (modifierCase_ == 4) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, modifier_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (selectionCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, ((java.lang.Integer) selection_));
    }
    if (selectionCase_ == 2) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, selection_);
    }
    if (modifierCase_ == 3) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, modifier_);
    }
    if (modifierCase_ == 4) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, modifier_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof tools.elide.base.LanguageSpec)) {
      return super.equals(obj);
    }
    tools.elide.base.LanguageSpec other = (tools.elide.base.LanguageSpec) obj;

    if (!getSelectionCase().equals(other.getSelectionCase())) return false;
    switch (selectionCase_) {
      case 1:
        if (getLanguageValue()
            != other.getLanguageValue()) return false;
        break;
      case 2:
        if (!getIsoLanguage()
            .equals(other.getIsoLanguage())) return false;
        break;
      case 0:
      default:
    }
    if (!getModifierCase().equals(other.getModifierCase())) return false;
    switch (modifierCase_) {
      case 3:
        if (!getIsoCountry()
            .equals(other.getIsoCountry())) return false;
        break;
      case 4:
        if (!getDialect()
            .equals(other.getDialect())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (selectionCase_) {
      case 1:
        hash = (37 * hash) + LANGUAGE_FIELD_NUMBER;
        hash = (53 * hash) + getLanguageValue();
        break;
      case 2:
        hash = (37 * hash) + ISO_LANGUAGE_FIELD_NUMBER;
        hash = (53 * hash) + getIsoLanguage().hashCode();
        break;
      case 0:
      default:
    }
    switch (modifierCase_) {
      case 3:
        hash = (37 * hash) + ISO_COUNTRY_FIELD_NUMBER;
        hash = (53 * hash) + getIsoCountry().hashCode();
        break;
      case 4:
        hash = (37 * hash) + DIALECT_FIELD_NUMBER;
        hash = (53 * hash) + getDialect().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static tools.elide.base.LanguageSpec parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static tools.elide.base.LanguageSpec parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static tools.elide.base.LanguageSpec parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static tools.elide.base.LanguageSpec parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static tools.elide.base.LanguageSpec parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static tools.elide.base.LanguageSpec parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static tools.elide.base.LanguageSpec parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static tools.elide.base.LanguageSpec parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static tools.elide.base.LanguageSpec parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static tools.elide.base.LanguageSpec parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static tools.elide.base.LanguageSpec parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static tools.elide.base.LanguageSpec parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(tools.elide.base.LanguageSpec prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Specifies a given language, along with a nationality for that language.
   * </pre>
   *
   * Protobuf type {@code base.LanguageSpec}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:base.LanguageSpec)
      tools.elide.base.LanguageSpecOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tools.elide.base.BaseLanguage.internal_static_base_LanguageSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tools.elide.base.BaseLanguage.internal_static_base_LanguageSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tools.elide.base.LanguageSpec.class, tools.elide.base.LanguageSpec.Builder.class);
    }

    // Construct using tools.elide.base.LanguageSpec.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      selectionCase_ = 0;
      selection_ = null;
      modifierCase_ = 0;
      modifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return tools.elide.base.BaseLanguage.internal_static_base_LanguageSpec_descriptor;
    }

    @java.lang.Override
    public tools.elide.base.LanguageSpec getDefaultInstanceForType() {
      return tools.elide.base.LanguageSpec.getDefaultInstance();
    }

    @java.lang.Override
    public tools.elide.base.LanguageSpec build() {
      tools.elide.base.LanguageSpec result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public tools.elide.base.LanguageSpec buildPartial() {
      tools.elide.base.LanguageSpec result = new tools.elide.base.LanguageSpec(this);
      if (selectionCase_ == 1) {
        result.selection_ = selection_;
      }
      if (selectionCase_ == 2) {
        result.selection_ = selection_;
      }
      if (modifierCase_ == 3) {
        result.modifier_ = modifier_;
      }
      if (modifierCase_ == 4) {
        result.modifier_ = modifier_;
      }
      result.selectionCase_ = selectionCase_;
      result.modifierCase_ = modifierCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof tools.elide.base.LanguageSpec) {
        return mergeFrom((tools.elide.base.LanguageSpec)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(tools.elide.base.LanguageSpec other) {
      if (other == tools.elide.base.LanguageSpec.getDefaultInstance()) return this;
      switch (other.getSelectionCase()) {
        case LANGUAGE: {
          setLanguageValue(other.getLanguageValue());
          break;
        }
        case ISO_LANGUAGE: {
          selectionCase_ = 2;
          selection_ = other.selection_;
          onChanged();
          break;
        }
        case SELECTION_NOT_SET: {
          break;
        }
      }
      switch (other.getModifierCase()) {
        case ISO_COUNTRY: {
          modifierCase_ = 3;
          modifier_ = other.modifier_;
          onChanged();
          break;
        }
        case DIALECT: {
          modifierCase_ = 4;
          modifier_ = other.modifier_;
          onChanged();
          break;
        }
        case MODIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      tools.elide.base.LanguageSpec parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (tools.elide.base.LanguageSpec) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int selectionCase_ = 0;
    private java.lang.Object selection_;
    public SelectionCase
        getSelectionCase() {
      return SelectionCase.forNumber(
          selectionCase_);
    }

    public Builder clearSelection() {
      selectionCase_ = 0;
      selection_ = null;
      onChanged();
      return this;
    }

    private int modifierCase_ = 0;
    private java.lang.Object modifier_;
    public ModifierCase
        getModifierCase() {
      return ModifierCase.forNumber(
          modifierCase_);
    }

    public Builder clearModifier() {
      modifierCase_ = 0;
      modifier_ = null;
      onChanged();
      return this;
    }


    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     * @return Whether the language field is set.
     */
    @java.lang.Override
    public boolean hasLanguage() {
      return selectionCase_ == 1;
    }
    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     * @return The enum numeric value on the wire for language.
     */
    @java.lang.Override
    public int getLanguageValue() {
      if (selectionCase_ == 1) {
        return ((java.lang.Integer) selection_).intValue();
      }
      return 0;
    }
    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     * @param value The enum numeric value on the wire for language to set.
     * @return This builder for chaining.
     */
    public Builder setLanguageValue(int value) {
      selectionCase_ = 1;
      selection_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     * @return The language.
     */
    @java.lang.Override
    public tools.elide.base.Language getLanguage() {
      if (selectionCase_ == 1) {
        @SuppressWarnings("deprecation")
        tools.elide.base.Language result = tools.elide.base.Language.valueOf(
            (java.lang.Integer) selection_);
        return result == null ? tools.elide.base.Language.UNRECOGNIZED : result;
      }
      return tools.elide.base.Language.ENGLISH;
    }
    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     * @param value The language to set.
     * @return This builder for chaining.
     */
    public Builder setLanguage(tools.elide.base.Language value) {
      if (value == null) {
        throw new NullPointerException();
      }
      selectionCase_ = 1;
      selection_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearLanguage() {
      if (selectionCase_ == 1) {
        selectionCase_ = 0;
        selection_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     * @return Whether the isoLanguage field is set.
     */
    @java.lang.Override
    public boolean hasIsoLanguage() {
      return selectionCase_ == 2;
    }
    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     * @return The isoLanguage.
     */
    @java.lang.Override
    public java.lang.String getIsoLanguage() {
      java.lang.Object ref = "";
      if (selectionCase_ == 2) {
        ref = selection_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (selectionCase_ == 2) {
          selection_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     * @return The bytes for isoLanguage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIsoLanguageBytes() {
      java.lang.Object ref = "";
      if (selectionCase_ == 2) {
        ref = selection_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (selectionCase_ == 2) {
          selection_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     * @param value The isoLanguage to set.
     * @return This builder for chaining.
     */
    public Builder setIsoLanguage(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  selectionCase_ = 2;
      selection_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsoLanguage() {
      if (selectionCase_ == 2) {
        selectionCase_ = 0;
        selection_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     * @param value The bytes for isoLanguage to set.
     * @return This builder for chaining.
     */
    public Builder setIsoLanguageBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      selectionCase_ = 2;
      selection_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     * @return Whether the isoCountry field is set.
     */
    @java.lang.Override
    public boolean hasIsoCountry() {
      return modifierCase_ == 3;
    }
    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     * @return The isoCountry.
     */
    @java.lang.Override
    public java.lang.String getIsoCountry() {
      java.lang.Object ref = "";
      if (modifierCase_ == 3) {
        ref = modifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (modifierCase_ == 3) {
          modifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     * @return The bytes for isoCountry.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIsoCountryBytes() {
      java.lang.Object ref = "";
      if (modifierCase_ == 3) {
        ref = modifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (modifierCase_ == 3) {
          modifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     * @param value The isoCountry to set.
     * @return This builder for chaining.
     */
    public Builder setIsoCountry(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  modifierCase_ = 3;
      modifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsoCountry() {
      if (modifierCase_ == 3) {
        modifierCase_ = 0;
        modifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     * @param value The bytes for isoCountry to set.
     * @return This builder for chaining.
     */
    public Builder setIsoCountryBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      modifierCase_ = 3;
      modifier_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     * @return Whether the dialect field is set.
     */
    @java.lang.Override
    public boolean hasDialect() {
      return modifierCase_ == 4;
    }
    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     * @return The dialect.
     */
    @java.lang.Override
    public java.lang.String getDialect() {
      java.lang.Object ref = "";
      if (modifierCase_ == 4) {
        ref = modifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (modifierCase_ == 4) {
          modifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     * @return The bytes for dialect.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDialectBytes() {
      java.lang.Object ref = "";
      if (modifierCase_ == 4) {
        ref = modifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (modifierCase_ == 4) {
          modifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     * @param value The dialect to set.
     * @return This builder for chaining.
     */
    public Builder setDialect(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  modifierCase_ = 4;
      modifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearDialect() {
      if (modifierCase_ == 4) {
        modifierCase_ = 0;
        modifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     * @param value The bytes for dialect to set.
     * @return This builder for chaining.
     */
    public Builder setDialectBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      modifierCase_ = 4;
      modifier_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:base.LanguageSpec)
  }

  // @@protoc_insertion_point(class_scope:base.LanguageSpec)
  private static final tools.elide.base.LanguageSpec DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new tools.elide.base.LanguageSpec();
  }

  public static tools.elide.base.LanguageSpec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LanguageSpec>
      PARSER = new com.google.protobuf.AbstractParser<LanguageSpec>() {
    @java.lang.Override
    public LanguageSpec parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LanguageSpec(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LanguageSpec> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LanguageSpec> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public tools.elide.base.LanguageSpec getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

