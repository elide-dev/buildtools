//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/assets/embedded.proto

package tools.elide.assets;

@kotlin.jvm.JvmName("-initializedataContainerRef")
public inline fun dataContainerRef(block: tools.elide.assets.DataContainerRefKt.Dsl.() -> kotlin.Unit): tools.elide.assets.DataContainerRef =
  tools.elide.assets.DataContainerRefKt.Dsl._create(tools.elide.assets.DataContainerRef.newBuilder()).apply { block() }._build()
public object DataContainerRefKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tools.elide.assets.DataContainerRef.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.assets.DataContainerRef.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.assets.DataContainerRef = _builder.build()

    /**
     * <pre>
     * Specifies raw data which is enclosed as a value with this reference. In this case, a data blob and fingerprint
     * are enclosed inline within the protocol buffer.
     * </pre>
     *
     * <code>.data.DataContainer data = 1;</code>
     */
    public var data: tools.elide.data.DataContainer
      @JvmName("getData")
      get() = _builder.getData()
      @JvmName("setData")
      set(value) {
        _builder.setData(value)
      }
    /**
     * <pre>
     * Specifies raw data which is enclosed as a value with this reference. In this case, a data blob and fingerprint
     * are enclosed inline within the protocol buffer.
     * </pre>
     *
     * <code>.data.DataContainer data = 1;</code>
     */
    public fun clearData() {
      _builder.clearData()
    }
    /**
     * <pre>
     * Specifies raw data which is enclosed as a value with this reference. In this case, a data blob and fingerprint
     * are enclosed inline within the protocol buffer.
     * </pre>
     *
     * <code>.data.DataContainer data = 1;</code>
     * @return Whether the data field is set.
     */
    public fun hasData(): kotlin.Boolean {
      return _builder.hasData()
    }

    /**
     * <pre>
     * Specifies a reference to a file resident in the application JAR or native image.
     * </pre>
     *
     * <code>.assets.DataContainerRef.FingerprintPathPair resource = 2;</code>
     */
    public var resource: tools.elide.assets.DataContainerRef.FingerprintPathPair
      @JvmName("getResource")
      get() = _builder.getResource()
      @JvmName("setResource")
      set(value) {
        _builder.setResource(value)
      }
    /**
     * <pre>
     * Specifies a reference to a file resident in the application JAR or native image.
     * </pre>
     *
     * <code>.assets.DataContainerRef.FingerprintPathPair resource = 2;</code>
     */
    public fun clearResource() {
      _builder.clearResource()
    }
    /**
     * <pre>
     * Specifies a reference to a file resident in the application JAR or native image.
     * </pre>
     *
     * <code>.assets.DataContainerRef.FingerprintPathPair resource = 2;</code>
     * @return Whether the resource field is set.
     */
    public fun hasResource(): kotlin.Boolean {
      return _builder.hasResource()
    }

    /**
     * <pre>
     * Specifies a reference to a file resident on the filesystem outside of the built application.
     * </pre>
     *
     * <code>.assets.DataContainerRef.FingerprintPathPair filesystem = 3;</code>
     */
    public var filesystem: tools.elide.assets.DataContainerRef.FingerprintPathPair
      @JvmName("getFilesystem")
      get() = _builder.getFilesystem()
      @JvmName("setFilesystem")
      set(value) {
        _builder.setFilesystem(value)
      }
    /**
     * <pre>
     * Specifies a reference to a file resident on the filesystem outside of the built application.
     * </pre>
     *
     * <code>.assets.DataContainerRef.FingerprintPathPair filesystem = 3;</code>
     */
    public fun clearFilesystem() {
      _builder.clearFilesystem()
    }
    /**
     * <pre>
     * Specifies a reference to a file resident on the filesystem outside of the built application.
     * </pre>
     *
     * <code>.assets.DataContainerRef.FingerprintPathPair filesystem = 3;</code>
     * @return Whether the filesystem field is set.
     */
    public fun hasFilesystem(): kotlin.Boolean {
      return _builder.hasFilesystem()
    }
    public val referenceCase: tools.elide.assets.DataContainerRef.ReferenceCase
      @JvmName("getReferenceCase")
      get() = _builder.getReferenceCase()

    public fun clearReference() {
      _builder.clearReference()
    }
  }
  @kotlin.jvm.JvmName("-initializefingerprintPathPair")
  public inline fun fingerprintPathPair(block: tools.elide.assets.DataContainerRefKt.FingerprintPathPairKt.Dsl.() -> kotlin.Unit): tools.elide.assets.DataContainerRef.FingerprintPathPair =
    tools.elide.assets.DataContainerRefKt.FingerprintPathPairKt.Dsl._create(tools.elide.assets.DataContainerRef.FingerprintPathPair.newBuilder()).apply { block() }._build()
  public object FingerprintPathPairKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: tools.elide.assets.DataContainerRef.FingerprintPathPair.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.DataContainerRef.FingerprintPathPair.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.DataContainerRef.FingerprintPathPair = _builder.build()

      /**
       * <pre>
       * Specifies the fingerprint information associated with, or calculated for, the subject info.
       * </pre>
       *
       * <code>.data.DataFingerprint fingerprint = 1;</code>
       */
      public var fingerprint: tools.elide.data.DataFingerprint
        @JvmName("getFingerprint")
        get() = _builder.getFingerprint()
        @JvmName("setFingerprint")
        set(value) {
          _builder.setFingerprint(value)
        }
      /**
       * <pre>
       * Specifies the fingerprint information associated with, or calculated for, the subject info.
       * </pre>
       *
       * <code>.data.DataFingerprint fingerprint = 1;</code>
       */
      public fun clearFingerprint() {
        _builder.clearFingerprint()
      }
      /**
       * <pre>
       * Specifies the fingerprint information associated with, or calculated for, the subject info.
       * </pre>
       *
       * <code>.data.DataFingerprint fingerprint = 1;</code>
       * @return Whether the fingerprint field is set.
       */
      public fun hasFingerprint(): kotlin.Boolean {
        return _builder.hasFingerprint()
      }

      /**
       * <pre>
       * Specifies the path for this data container reference.
       * </pre>
       *
       * <code>string path = 2;</code>
       */
      public var path: kotlin.String
        @JvmName("getPath")
        get() = _builder.getPath()
        @JvmName("setPath")
        set(value) {
          _builder.setPath(value)
        }
      /**
       * <pre>
       * Specifies the path for this data container reference.
       * </pre>
       *
       * <code>string path = 2;</code>
       */
      public fun clearPath() {
        _builder.clearPath()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.assets.DataContainerRef.copy(block: tools.elide.assets.DataContainerRefKt.Dsl.() -> kotlin.Unit): tools.elide.assets.DataContainerRef =
  tools.elide.assets.DataContainerRefKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.assets.DataContainerRef.FingerprintPathPair.copy(block: tools.elide.assets.DataContainerRefKt.FingerprintPathPairKt.Dsl.() -> kotlin.Unit): tools.elide.assets.DataContainerRef.FingerprintPathPair =
  tools.elide.assets.DataContainerRefKt.FingerprintPathPairKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.assets.DataContainerRef.FingerprintPathPairOrBuilder.fingerprintOrNull: tools.elide.data.DataFingerprint?
  get() = if (hasFingerprint()) getFingerprint() else null

val tools.elide.assets.DataContainerRefOrBuilder.dataOrNull: tools.elide.data.DataContainer?
  get() = if (hasData()) getData() else null

val tools.elide.assets.DataContainerRefOrBuilder.resourceOrNull: tools.elide.assets.DataContainerRef.FingerprintPathPair?
  get() = if (hasResource()) getResource() else null

val tools.elide.assets.DataContainerRefOrBuilder.filesystemOrNull: tools.elide.assets.DataContainerRef.FingerprintPathPair?
  get() = if (hasFilesystem()) getFilesystem() else null

