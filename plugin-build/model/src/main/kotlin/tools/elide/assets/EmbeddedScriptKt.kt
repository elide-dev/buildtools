//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/assets/embedded.proto

package tools.elide.assets;

@kotlin.jvm.JvmName("-initializeembeddedScript")
public inline fun embeddedScript(block: tools.elide.assets.EmbeddedScriptKt.Dsl.() -> kotlin.Unit): tools.elide.assets.EmbeddedScript =
  tools.elide.assets.EmbeddedScriptKt.Dsl._create(tools.elide.assets.EmbeddedScript.newBuilder()).apply { block() }._build()
public object EmbeddedScriptKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tools.elide.assets.EmbeddedScript.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.assets.EmbeddedScript.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.assets.EmbeddedScript = _builder.build()

    /**
     * <pre>
     * </pre>
     *
     * <code>string module = 1;</code>
     */
    public var module: kotlin.String
      @JvmName("getModule")
      get() = _builder.getModule()
      @JvmName("setModule")
      set(value) {
        _builder.setModule(value)
      }
    /**
     * <pre>
     * </pre>
     *
     * <code>string module = 1;</code>
     */
    public fun clearModule() {
      _builder.clearModule()
    }

    /**
     * <pre>
     * </pre>
     *
     * <code>string filename = 2;</code>
     */
    public var filename: kotlin.String
      @JvmName("getFilename")
      get() = _builder.getFilename()
      @JvmName("setFilename")
      set(value) {
        _builder.setFilename(value)
      }
    /**
     * <pre>
     * </pre>
     *
     * <code>string filename = 2;</code>
     */
    public fun clearFilename() {
      _builder.clearFilename()
    }

    /**
     * <pre>
     * </pre>
     *
     * <code>.assets.EmbeddedScriptLanguage language = 3;</code>
     */
    public var language: tools.elide.assets.EmbeddedScriptLanguage
      @JvmName("getLanguage")
      get() = _builder.getLanguage()
      @JvmName("setLanguage")
      set(value) {
        _builder.setLanguage(value)
      }
    /**
     * <pre>
     * </pre>
     *
     * <code>.assets.EmbeddedScriptLanguage language = 3;</code>
     */
    public fun clearLanguage() {
      _builder.clearLanguage()
    }

    /**
     * <pre>
     * </pre>
     *
     * <code>.crypto.HashAlgorithm hash_algorithm = 4;</code>
     */
    public var hashAlgorithm: tools.elide.crypto.HashAlgorithm
      @JvmName("getHashAlgorithm")
      get() = _builder.getHashAlgorithm()
      @JvmName("setHashAlgorithm")
      set(value) {
        _builder.setHashAlgorithm(value)
      }
    /**
     * <pre>
     * </pre>
     *
     * <code>.crypto.HashAlgorithm hash_algorithm = 4;</code>
     */
    public fun clearHashAlgorithm() {
      _builder.clearHashAlgorithm()
    }

    /**
     * <pre>
     * </pre>
     *
     * <code>bytes fingerprint = 5;</code>
     */
    public var fingerprint: com.google.protobuf.ByteString
      @JvmName("getFingerprint")
      get() = _builder.getFingerprint()
      @JvmName("setFingerprint")
      set(value) {
        _builder.setFingerprint(value)
      }
    /**
     * <pre>
     * </pre>
     *
     * <code>bytes fingerprint = 5;</code>
     */
    public fun clearFingerprint() {
      _builder.clearFingerprint()
    }

    /**
     * <pre>
     * </pre>
     *
     * <code>.assets.EmbeddedScriptMetadata metadata = 6;</code>
     */
    public var metadata: tools.elide.assets.EmbeddedScriptMetadata
      @JvmName("getMetadata")
      get() = _builder.getMetadata()
      @JvmName("setMetadata")
      set(value) {
        _builder.setMetadata(value)
      }
    /**
     * <pre>
     * </pre>
     *
     * <code>.assets.EmbeddedScriptMetadata metadata = 6;</code>
     */
    public fun clearMetadata() {
      _builder.clearMetadata()
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>.assets.EmbeddedScriptMetadata metadata = 6;</code>
     * @return Whether the metadata field is set.
     */
    public fun hasMetadata(): kotlin.Boolean {
      return _builder.hasMetadata()
    }

    /**
     * <pre>
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_modified = 7;</code>
     */
    public var lastModified: com.google.protobuf.Timestamp
      @JvmName("getLastModified")
      get() = _builder.getLastModified()
      @JvmName("setLastModified")
      set(value) {
        _builder.setLastModified(value)
      }
    /**
     * <pre>
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_modified = 7;</code>
     */
    public fun clearLastModified() {
      _builder.clearLastModified()
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>.google.protobuf.Timestamp last_modified = 7;</code>
     * @return Whether the lastModified field is set.
     */
    public fun hasLastModified(): kotlin.Boolean {
      return _builder.hasLastModified()
    }

    /**
     * <pre>
     * </pre>
     *
     * <code>string sourcemap = 8;</code>
     */
    public var sourcemap: kotlin.String
      @JvmName("getSourcemap")
      get() = _builder.getSourcemap()
      @JvmName("setSourcemap")
      set(value) {
        _builder.setSourcemap(value)
      }
    /**
     * <pre>
     * </pre>
     *
     * <code>string sourcemap = 8;</code>
     */
    public fun clearSourcemap() {
      _builder.clearSourcemap()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.assets.EmbeddedScript.copy(block: tools.elide.assets.EmbeddedScriptKt.Dsl.() -> kotlin.Unit): tools.elide.assets.EmbeddedScript =
  tools.elide.assets.EmbeddedScriptKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.assets.EmbeddedScriptOrBuilder.metadataOrNull: tools.elide.assets.EmbeddedScriptMetadata?
  get() = if (hasMetadata()) getMetadata() else null

val tools.elide.assets.EmbeddedScriptOrBuilder.lastModifiedOrNull: com.google.protobuf.Timestamp?
  get() = if (hasLastModified()) getLastModified() else null

