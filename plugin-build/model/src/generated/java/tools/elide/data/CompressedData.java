// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elide/data/data.proto

package tools.elide.data;

/**
 * <pre>
 * Generic container for compressed data, which simply combines an enumerated `CompressionMode` with a blob of raw bytes
 * which are expected to be compressed by the specified algorithm or tool.
 * </pre>
 *
 * Protobuf type {@code data.CompressedData}
 */
public final class CompressedData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:data.CompressedData)
    CompressedDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CompressedData.newBuilder() to construct.
  private CompressedData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CompressedData() {
    compression_ = 0;
    integrity_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CompressedData();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CompressedData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            compression_ = rawValue;
            break;
          }
          case 18: {
            tools.elide.data.DataContainer.Builder subBuilder = null;
            if (data_ != null) {
              subBuilder = data_.toBuilder();
            }
            data_ = input.readMessage(tools.elide.data.DataContainer.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(data_);
              data_ = subBuilder.buildPartial();
            }

            break;
          }
          case 24: {

            size_ = input.readUInt64();
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              integrity_ = new java.util.ArrayList<tools.elide.data.DataFingerprint>();
              mutable_bitField0_ |= 0x00000001;
            }
            integrity_.add(
                input.readMessage(tools.elide.data.DataFingerprint.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        integrity_ = java.util.Collections.unmodifiableList(integrity_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return tools.elide.data.Data.internal_static_data_CompressedData_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return tools.elide.data.Data.internal_static_data_CompressedData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            tools.elide.data.CompressedData.class, tools.elide.data.CompressedData.Builder.class);
  }

  public static final int COMPRESSION_FIELD_NUMBER = 1;
  private int compression_;
  /**
   * <pre>
   * Compression mode applied to this data. If no compression is active, `IDENTITY` may be specified as a default.
   * </pre>
   *
   * <code>.data.CompressionMode compression = 1;</code>
   * @return The enum numeric value on the wire for compression.
   */
  @java.lang.Override public int getCompressionValue() {
    return compression_;
  }
  /**
   * <pre>
   * Compression mode applied to this data. If no compression is active, `IDENTITY` may be specified as a default.
   * </pre>
   *
   * <code>.data.CompressionMode compression = 1;</code>
   * @return The compression.
   */
  @java.lang.Override public tools.elide.data.CompressionMode getCompression() {
    @SuppressWarnings("deprecation")
    tools.elide.data.CompressionMode result = tools.elide.data.CompressionMode.valueOf(compression_);
    return result == null ? tools.elide.data.CompressionMode.UNRECOGNIZED : result;
  }

  public static final int DATA_FIELD_NUMBER = 2;
  private tools.elide.data.DataContainer data_;
  /**
   * <pre>
   * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
   * bytes, aside from being compressed by the algorithm specified by `compression`.
   * </pre>
   *
   * <code>.data.DataContainer data = 2;</code>
   * @return Whether the data field is set.
   */
  @java.lang.Override
  public boolean hasData() {
    return data_ != null;
  }
  /**
   * <pre>
   * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
   * bytes, aside from being compressed by the algorithm specified by `compression`.
   * </pre>
   *
   * <code>.data.DataContainer data = 2;</code>
   * @return The data.
   */
  @java.lang.Override
  public tools.elide.data.DataContainer getData() {
    return data_ == null ? tools.elide.data.DataContainer.getDefaultInstance() : data_;
  }
  /**
   * <pre>
   * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
   * bytes, aside from being compressed by the algorithm specified by `compression`.
   * </pre>
   *
   * <code>.data.DataContainer data = 2;</code>
   */
  @java.lang.Override
  public tools.elide.data.DataContainerOrBuilder getDataOrBuilder() {
    return getData();
  }

  public static final int SIZE_FIELD_NUMBER = 3;
  private long size_;
  /**
   * <pre>
   * Size of the asset data before compression. To obtain the size of the data in compressed form, simply take the
   * length of the data field itself. This value is expressed in bytes.
   * </pre>
   *
   * <code>uint64 size = 3;</code>
   * @return The size.
   */
  @java.lang.Override
  public long getSize() {
    return size_;
  }

  public static final int INTEGRITY_FIELD_NUMBER = 4;
  private java.util.List<tools.elide.data.DataFingerprint> integrity_;
  /**
   * <pre>
   * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
   * verify the consistency of the data held by this container after de-compression.
   * </pre>
   *
   * <code>repeated .data.DataFingerprint integrity = 4;</code>
   */
  @java.lang.Override
  public java.util.List<tools.elide.data.DataFingerprint> getIntegrityList() {
    return integrity_;
  }
  /**
   * <pre>
   * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
   * verify the consistency of the data held by this container after de-compression.
   * </pre>
   *
   * <code>repeated .data.DataFingerprint integrity = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends tools.elide.data.DataFingerprintOrBuilder> 
      getIntegrityOrBuilderList() {
    return integrity_;
  }
  /**
   * <pre>
   * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
   * verify the consistency of the data held by this container after de-compression.
   * </pre>
   *
   * <code>repeated .data.DataFingerprint integrity = 4;</code>
   */
  @java.lang.Override
  public int getIntegrityCount() {
    return integrity_.size();
  }
  /**
   * <pre>
   * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
   * verify the consistency of the data held by this container after de-compression.
   * </pre>
   *
   * <code>repeated .data.DataFingerprint integrity = 4;</code>
   */
  @java.lang.Override
  public tools.elide.data.DataFingerprint getIntegrity(int index) {
    return integrity_.get(index);
  }
  /**
   * <pre>
   * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
   * verify the consistency of the data held by this container after de-compression.
   * </pre>
   *
   * <code>repeated .data.DataFingerprint integrity = 4;</code>
   */
  @java.lang.Override
  public tools.elide.data.DataFingerprintOrBuilder getIntegrityOrBuilder(
      int index) {
    return integrity_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (compression_ != tools.elide.data.CompressionMode.IDENTITY.getNumber()) {
      output.writeEnum(1, compression_);
    }
    if (data_ != null) {
      output.writeMessage(2, getData());
    }
    if (size_ != 0L) {
      output.writeUInt64(3, size_);
    }
    for (int i = 0; i < integrity_.size(); i++) {
      output.writeMessage(4, integrity_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (compression_ != tools.elide.data.CompressionMode.IDENTITY.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, compression_);
    }
    if (data_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getData());
    }
    if (size_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(3, size_);
    }
    for (int i = 0; i < integrity_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, integrity_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof tools.elide.data.CompressedData)) {
      return super.equals(obj);
    }
    tools.elide.data.CompressedData other = (tools.elide.data.CompressedData) obj;

    if (compression_ != other.compression_) return false;
    if (hasData() != other.hasData()) return false;
    if (hasData()) {
      if (!getData()
          .equals(other.getData())) return false;
    }
    if (getSize()
        != other.getSize()) return false;
    if (!getIntegrityList()
        .equals(other.getIntegrityList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + COMPRESSION_FIELD_NUMBER;
    hash = (53 * hash) + compression_;
    if (hasData()) {
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
    }
    hash = (37 * hash) + SIZE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSize());
    if (getIntegrityCount() > 0) {
      hash = (37 * hash) + INTEGRITY_FIELD_NUMBER;
      hash = (53 * hash) + getIntegrityList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static tools.elide.data.CompressedData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static tools.elide.data.CompressedData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static tools.elide.data.CompressedData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static tools.elide.data.CompressedData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static tools.elide.data.CompressedData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static tools.elide.data.CompressedData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static tools.elide.data.CompressedData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static tools.elide.data.CompressedData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static tools.elide.data.CompressedData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static tools.elide.data.CompressedData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static tools.elide.data.CompressedData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static tools.elide.data.CompressedData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(tools.elide.data.CompressedData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Generic container for compressed data, which simply combines an enumerated `CompressionMode` with a blob of raw bytes
   * which are expected to be compressed by the specified algorithm or tool.
   * </pre>
   *
   * Protobuf type {@code data.CompressedData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:data.CompressedData)
      tools.elide.data.CompressedDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tools.elide.data.Data.internal_static_data_CompressedData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tools.elide.data.Data.internal_static_data_CompressedData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tools.elide.data.CompressedData.class, tools.elide.data.CompressedData.Builder.class);
    }

    // Construct using tools.elide.data.CompressedData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getIntegrityFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      compression_ = 0;

      if (dataBuilder_ == null) {
        data_ = null;
      } else {
        data_ = null;
        dataBuilder_ = null;
      }
      size_ = 0L;

      if (integrityBuilder_ == null) {
        integrity_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        integrityBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return tools.elide.data.Data.internal_static_data_CompressedData_descriptor;
    }

    @java.lang.Override
    public tools.elide.data.CompressedData getDefaultInstanceForType() {
      return tools.elide.data.CompressedData.getDefaultInstance();
    }

    @java.lang.Override
    public tools.elide.data.CompressedData build() {
      tools.elide.data.CompressedData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public tools.elide.data.CompressedData buildPartial() {
      tools.elide.data.CompressedData result = new tools.elide.data.CompressedData(this);
      int from_bitField0_ = bitField0_;
      result.compression_ = compression_;
      if (dataBuilder_ == null) {
        result.data_ = data_;
      } else {
        result.data_ = dataBuilder_.build();
      }
      result.size_ = size_;
      if (integrityBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          integrity_ = java.util.Collections.unmodifiableList(integrity_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.integrity_ = integrity_;
      } else {
        result.integrity_ = integrityBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof tools.elide.data.CompressedData) {
        return mergeFrom((tools.elide.data.CompressedData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(tools.elide.data.CompressedData other) {
      if (other == tools.elide.data.CompressedData.getDefaultInstance()) return this;
      if (other.compression_ != 0) {
        setCompressionValue(other.getCompressionValue());
      }
      if (other.hasData()) {
        mergeData(other.getData());
      }
      if (other.getSize() != 0L) {
        setSize(other.getSize());
      }
      if (integrityBuilder_ == null) {
        if (!other.integrity_.isEmpty()) {
          if (integrity_.isEmpty()) {
            integrity_ = other.integrity_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureIntegrityIsMutable();
            integrity_.addAll(other.integrity_);
          }
          onChanged();
        }
      } else {
        if (!other.integrity_.isEmpty()) {
          if (integrityBuilder_.isEmpty()) {
            integrityBuilder_.dispose();
            integrityBuilder_ = null;
            integrity_ = other.integrity_;
            bitField0_ = (bitField0_ & ~0x00000001);
            integrityBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getIntegrityFieldBuilder() : null;
          } else {
            integrityBuilder_.addAllMessages(other.integrity_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      tools.elide.data.CompressedData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (tools.elide.data.CompressedData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int compression_ = 0;
    /**
     * <pre>
     * Compression mode applied to this data. If no compression is active, `IDENTITY` may be specified as a default.
     * </pre>
     *
     * <code>.data.CompressionMode compression = 1;</code>
     * @return The enum numeric value on the wire for compression.
     */
    @java.lang.Override public int getCompressionValue() {
      return compression_;
    }
    /**
     * <pre>
     * Compression mode applied to this data. If no compression is active, `IDENTITY` may be specified as a default.
     * </pre>
     *
     * <code>.data.CompressionMode compression = 1;</code>
     * @param value The enum numeric value on the wire for compression to set.
     * @return This builder for chaining.
     */
    public Builder setCompressionValue(int value) {
      
      compression_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Compression mode applied to this data. If no compression is active, `IDENTITY` may be specified as a default.
     * </pre>
     *
     * <code>.data.CompressionMode compression = 1;</code>
     * @return The compression.
     */
    @java.lang.Override
    public tools.elide.data.CompressionMode getCompression() {
      @SuppressWarnings("deprecation")
      tools.elide.data.CompressionMode result = tools.elide.data.CompressionMode.valueOf(compression_);
      return result == null ? tools.elide.data.CompressionMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Compression mode applied to this data. If no compression is active, `IDENTITY` may be specified as a default.
     * </pre>
     *
     * <code>.data.CompressionMode compression = 1;</code>
     * @param value The compression to set.
     * @return This builder for chaining.
     */
    public Builder setCompression(tools.elide.data.CompressionMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      compression_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Compression mode applied to this data. If no compression is active, `IDENTITY` may be specified as a default.
     * </pre>
     *
     * <code>.data.CompressionMode compression = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCompression() {
      
      compression_ = 0;
      onChanged();
      return this;
    }

    private tools.elide.data.DataContainer data_;
    private com.google.protobuf.SingleFieldBuilderV3<
        tools.elide.data.DataContainer, tools.elide.data.DataContainer.Builder, tools.elide.data.DataContainerOrBuilder> dataBuilder_;
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     * @return Whether the data field is set.
     */
    public boolean hasData() {
      return dataBuilder_ != null || data_ != null;
    }
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     * @return The data.
     */
    public tools.elide.data.DataContainer getData() {
      if (dataBuilder_ == null) {
        return data_ == null ? tools.elide.data.DataContainer.getDefaultInstance() : data_;
      } else {
        return dataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     */
    public Builder setData(tools.elide.data.DataContainer value) {
      if (dataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        data_ = value;
        onChanged();
      } else {
        dataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     */
    public Builder setData(
        tools.elide.data.DataContainer.Builder builderForValue) {
      if (dataBuilder_ == null) {
        data_ = builderForValue.build();
        onChanged();
      } else {
        dataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     */
    public Builder mergeData(tools.elide.data.DataContainer value) {
      if (dataBuilder_ == null) {
        if (data_ != null) {
          data_ =
            tools.elide.data.DataContainer.newBuilder(data_).mergeFrom(value).buildPartial();
        } else {
          data_ = value;
        }
        onChanged();
      } else {
        dataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     */
    public Builder clearData() {
      if (dataBuilder_ == null) {
        data_ = null;
        onChanged();
      } else {
        data_ = null;
        dataBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     */
    public tools.elide.data.DataContainer.Builder getDataBuilder() {
      
      onChanged();
      return getDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     */
    public tools.elide.data.DataContainerOrBuilder getDataOrBuilder() {
      if (dataBuilder_ != null) {
        return dataBuilder_.getMessageOrBuilder();
      } else {
        return data_ == null ?
            tools.elide.data.DataContainer.getDefaultInstance() : data_;
      }
    }
    /**
     * <pre>
     * Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw
     * bytes, aside from being compressed by the algorithm specified by `compression`.
     * </pre>
     *
     * <code>.data.DataContainer data = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        tools.elide.data.DataContainer, tools.elide.data.DataContainer.Builder, tools.elide.data.DataContainerOrBuilder> 
        getDataFieldBuilder() {
      if (dataBuilder_ == null) {
        dataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            tools.elide.data.DataContainer, tools.elide.data.DataContainer.Builder, tools.elide.data.DataContainerOrBuilder>(
                getData(),
                getParentForChildren(),
                isClean());
        data_ = null;
      }
      return dataBuilder_;
    }

    private long size_ ;
    /**
     * <pre>
     * Size of the asset data before compression. To obtain the size of the data in compressed form, simply take the
     * length of the data field itself. This value is expressed in bytes.
     * </pre>
     *
     * <code>uint64 size = 3;</code>
     * @return The size.
     */
    @java.lang.Override
    public long getSize() {
      return size_;
    }
    /**
     * <pre>
     * Size of the asset data before compression. To obtain the size of the data in compressed form, simply take the
     * length of the data field itself. This value is expressed in bytes.
     * </pre>
     *
     * <code>uint64 size = 3;</code>
     * @param value The size to set.
     * @return This builder for chaining.
     */
    public Builder setSize(long value) {
      
      size_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Size of the asset data before compression. To obtain the size of the data in compressed form, simply take the
     * length of the data field itself. This value is expressed in bytes.
     * </pre>
     *
     * <code>uint64 size = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSize() {
      
      size_ = 0L;
      onChanged();
      return this;
    }

    private java.util.List<tools.elide.data.DataFingerprint> integrity_ =
      java.util.Collections.emptyList();
    private void ensureIntegrityIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        integrity_ = new java.util.ArrayList<tools.elide.data.DataFingerprint>(integrity_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        tools.elide.data.DataFingerprint, tools.elide.data.DataFingerprint.Builder, tools.elide.data.DataFingerprintOrBuilder> integrityBuilder_;

    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public java.util.List<tools.elide.data.DataFingerprint> getIntegrityList() {
      if (integrityBuilder_ == null) {
        return java.util.Collections.unmodifiableList(integrity_);
      } else {
        return integrityBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public int getIntegrityCount() {
      if (integrityBuilder_ == null) {
        return integrity_.size();
      } else {
        return integrityBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public tools.elide.data.DataFingerprint getIntegrity(int index) {
      if (integrityBuilder_ == null) {
        return integrity_.get(index);
      } else {
        return integrityBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder setIntegrity(
        int index, tools.elide.data.DataFingerprint value) {
      if (integrityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIntegrityIsMutable();
        integrity_.set(index, value);
        onChanged();
      } else {
        integrityBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder setIntegrity(
        int index, tools.elide.data.DataFingerprint.Builder builderForValue) {
      if (integrityBuilder_ == null) {
        ensureIntegrityIsMutable();
        integrity_.set(index, builderForValue.build());
        onChanged();
      } else {
        integrityBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder addIntegrity(tools.elide.data.DataFingerprint value) {
      if (integrityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIntegrityIsMutable();
        integrity_.add(value);
        onChanged();
      } else {
        integrityBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder addIntegrity(
        int index, tools.elide.data.DataFingerprint value) {
      if (integrityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIntegrityIsMutable();
        integrity_.add(index, value);
        onChanged();
      } else {
        integrityBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder addIntegrity(
        tools.elide.data.DataFingerprint.Builder builderForValue) {
      if (integrityBuilder_ == null) {
        ensureIntegrityIsMutable();
        integrity_.add(builderForValue.build());
        onChanged();
      } else {
        integrityBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder addIntegrity(
        int index, tools.elide.data.DataFingerprint.Builder builderForValue) {
      if (integrityBuilder_ == null) {
        ensureIntegrityIsMutable();
        integrity_.add(index, builderForValue.build());
        onChanged();
      } else {
        integrityBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder addAllIntegrity(
        java.lang.Iterable<? extends tools.elide.data.DataFingerprint> values) {
      if (integrityBuilder_ == null) {
        ensureIntegrityIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, integrity_);
        onChanged();
      } else {
        integrityBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder clearIntegrity() {
      if (integrityBuilder_ == null) {
        integrity_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        integrityBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public Builder removeIntegrity(int index) {
      if (integrityBuilder_ == null) {
        ensureIntegrityIsMutable();
        integrity_.remove(index);
        onChanged();
      } else {
        integrityBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public tools.elide.data.DataFingerprint.Builder getIntegrityBuilder(
        int index) {
      return getIntegrityFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public tools.elide.data.DataFingerprintOrBuilder getIntegrityOrBuilder(
        int index) {
      if (integrityBuilder_ == null) {
        return integrity_.get(index);  } else {
        return integrityBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public java.util.List<? extends tools.elide.data.DataFingerprintOrBuilder> 
         getIntegrityOrBuilderList() {
      if (integrityBuilder_ != null) {
        return integrityBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(integrity_);
      }
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public tools.elide.data.DataFingerprint.Builder addIntegrityBuilder() {
      return getIntegrityFieldBuilder().addBuilder(
          tools.elide.data.DataFingerprint.getDefaultInstance());
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public tools.elide.data.DataFingerprint.Builder addIntegrityBuilder(
        int index) {
      return getIntegrityFieldBuilder().addBuilder(
          index, tools.elide.data.DataFingerprint.getDefaultInstance());
    }
    /**
     * <pre>
     * Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to
     * verify the consistency of the data held by this container after de-compression.
     * </pre>
     *
     * <code>repeated .data.DataFingerprint integrity = 4;</code>
     */
    public java.util.List<tools.elide.data.DataFingerprint.Builder> 
         getIntegrityBuilderList() {
      return getIntegrityFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        tools.elide.data.DataFingerprint, tools.elide.data.DataFingerprint.Builder, tools.elide.data.DataFingerprintOrBuilder> 
        getIntegrityFieldBuilder() {
      if (integrityBuilder_ == null) {
        integrityBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            tools.elide.data.DataFingerprint, tools.elide.data.DataFingerprint.Builder, tools.elide.data.DataFingerprintOrBuilder>(
                integrity_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        integrity_ = null;
      }
      return integrityBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:data.CompressedData)
  }

  // @@protoc_insertion_point(class_scope:data.CompressedData)
  private static final tools.elide.data.CompressedData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new tools.elide.data.CompressedData();
  }

  public static tools.elide.data.CompressedData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CompressedData>
      PARSER = new com.google.protobuf.AbstractParser<CompressedData>() {
    @java.lang.Override
    public CompressedData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CompressedData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CompressedData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CompressedData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public tools.elide.data.CompressedData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

