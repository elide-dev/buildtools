// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elide/data/data.proto

package tools.elide.data;

/**
 * <pre>
 * Specifies compression modes that are supported by the framework for pre-compressed assets stored inline within the
 * manifest. These inlined assets do not replace original source assets, which are enclosed in the resource JAR.
 * </pre>
 *
 * Protobuf enum {@code data.CompressionMode}
 */
public enum CompressionMode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * No compression.
   * </pre>
   *
   * <code>IDENTITY = 0;</code>
   */
  IDENTITY(0),
  /**
   * <pre>
   * Standard gzip-based compression.
   * </pre>
   *
   * <code>GZIP = 1;</code>
   */
  GZIP(1),
  /**
   * <pre>
   * Brotli-based compression.
   * </pre>
   *
   * <code>BROTLI = 2;</code>
   */
  BROTLI(2),
  /**
   * <pre>
   * Snappy-based compression.
   * </pre>
   *
   * <code>SNAPPY = 3;</code>
   */
  SNAPPY(3),
  /**
   * <pre>
   * Deflate (zlib)-based compression.
   * </pre>
   *
   * <code>DEFLATE = 4;</code>
   */
  DEFLATE(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * No compression.
   * </pre>
   *
   * <code>IDENTITY = 0;</code>
   */
  public static final int IDENTITY_VALUE = 0;
  /**
   * <pre>
   * Standard gzip-based compression.
   * </pre>
   *
   * <code>GZIP = 1;</code>
   */
  public static final int GZIP_VALUE = 1;
  /**
   * <pre>
   * Brotli-based compression.
   * </pre>
   *
   * <code>BROTLI = 2;</code>
   */
  public static final int BROTLI_VALUE = 2;
  /**
   * <pre>
   * Snappy-based compression.
   * </pre>
   *
   * <code>SNAPPY = 3;</code>
   */
  public static final int SNAPPY_VALUE = 3;
  /**
   * <pre>
   * Deflate (zlib)-based compression.
   * </pre>
   *
   * <code>DEFLATE = 4;</code>
   */
  public static final int DEFLATE_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CompressionMode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static CompressionMode forNumber(int value) {
    switch (value) {
      case 0: return IDENTITY;
      case 1: return GZIP;
      case 2: return BROTLI;
      case 3: return SNAPPY;
      case 4: return DEFLATE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CompressionMode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CompressionMode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CompressionMode>() {
          public CompressionMode findValueByNumber(int number) {
            return CompressionMode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return tools.elide.data.Data.getDescriptor().getEnumTypes().get(0);
  }

  private static final CompressionMode[] VALUES = values();

  public static CompressionMode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CompressionMode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:data.CompressionMode)
}

