//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/page/media.proto

package tools.elide.page;

@kotlin.jvm.JvmName("-initializemediaAsset")
public inline fun mediaAsset(block: tools.elide.page.MediaAssetKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset =
  tools.elide.page.MediaAssetKt.Dsl._create(tools.elide.page.MediaAsset.newBuilder()).apply { block() }._build()
public object MediaAssetKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tools.elide.page.MediaAsset.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.page.MediaAsset.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.page.MediaAsset = _builder.build()

    /**
     * <pre>
     * Describes, in broad terms, the kind of media being attached.
     * </pre>
     *
     * <code>.page.MediaType kind = 1;</code>
     */
    public var kind: tools.elide.page.MediaType
      @JvmName("getKind")
      get() = _builder.getKind()
      @JvmName("setKind")
      set(value) {
        _builder.setKind(value)
      }
    /**
     * <pre>
     * Describes, in broad terms, the kind of media being attached.
     * </pre>
     *
     * <code>.page.MediaType kind = 1;</code>
     */
    public fun clearKind() {
      _builder.clearKind()
    }

    /**
     * <pre>
     * Describes concrete information about an attached media link.
     * </pre>
     *
     * <code>.page.MediaAsset.Link link = 10;</code>
     */
    public var link: tools.elide.page.MediaAsset.Link
      @JvmName("getLink")
      get() = _builder.getLink()
      @JvmName("setLink")
      set(value) {
        _builder.setLink(value)
      }
    /**
     * <pre>
     * Describes concrete information about an attached media link.
     * </pre>
     *
     * <code>.page.MediaAsset.Link link = 10;</code>
     */
    public fun clearLink() {
      _builder.clearLink()
    }
    /**
     * <pre>
     * Describes concrete information about an attached media link.
     * </pre>
     *
     * <code>.page.MediaAsset.Link link = 10;</code>
     * @return Whether the link field is set.
     */
    public fun hasLink(): kotlin.Boolean {
      return _builder.hasLink()
    }

    /**
     * <pre>
     * Describes concrete information about an attached image.
     * </pre>
     *
     * <code>.page.MediaAsset.Image image = 20;</code>
     */
    public var image: tools.elide.page.MediaAsset.Image
      @JvmName("getImage")
      get() = _builder.getImage()
      @JvmName("setImage")
      set(value) {
        _builder.setImage(value)
      }
    /**
     * <pre>
     * Describes concrete information about an attached image.
     * </pre>
     *
     * <code>.page.MediaAsset.Image image = 20;</code>
     */
    public fun clearImage() {
      _builder.clearImage()
    }
    /**
     * <pre>
     * Describes concrete information about an attached image.
     * </pre>
     *
     * <code>.page.MediaAsset.Image image = 20;</code>
     * @return Whether the image field is set.
     */
    public fun hasImage(): kotlin.Boolean {
      return _builder.hasImage()
    }

    /**
     * <pre>
     * Describes concrete information about an attached video.
     * </pre>
     *
     * <code>.page.MediaAsset.Video video = 30;</code>
     */
    public var video: tools.elide.page.MediaAsset.Video
      @JvmName("getVideo")
      get() = _builder.getVideo()
      @JvmName("setVideo")
      set(value) {
        _builder.setVideo(value)
      }
    /**
     * <pre>
     * Describes concrete information about an attached video.
     * </pre>
     *
     * <code>.page.MediaAsset.Video video = 30;</code>
     */
    public fun clearVideo() {
      _builder.clearVideo()
    }
    /**
     * <pre>
     * Describes concrete information about an attached video.
     * </pre>
     *
     * <code>.page.MediaAsset.Video video = 30;</code>
     * @return Whether the video field is set.
     */
    public fun hasVideo(): kotlin.Boolean {
      return _builder.hasVideo()
    }
    public val mediaCase: tools.elide.page.MediaAsset.MediaCase
      @JvmName("getMediaCase")
      get() = _builder.getMediaCase()

    public fun clearMedia() {
      _builder.clearMedia()
    }
  }
  @kotlin.jvm.JvmName("-initializelink")
  public inline fun link(block: tools.elide.page.MediaAssetKt.LinkKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Link =
    tools.elide.page.MediaAssetKt.LinkKt.Dsl._create(tools.elide.page.MediaAsset.Link.newBuilder()).apply { block() }._build()
  public object LinkKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: tools.elide.page.MediaAsset.Link.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.MediaAsset.Link.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.MediaAsset.Link = _builder.build()

      /**
       * <pre>
       * URI to consider for an attached media link.
       * </pre>
       *
       * <code>string uri = 1;</code>
       */
      public var uri: kotlin.String
        @JvmName("getUri")
        get() = _builder.getUri()
        @JvmName("setUri")
        set(value) {
          _builder.setUri(value)
        }
      /**
       * <pre>
       * URI to consider for an attached media link.
       * </pre>
       *
       * <code>string uri = 1;</code>
       */
      public fun clearUri() {
        _builder.clearUri()
      }

      /**
       * <pre>
       * Alternative text to display for this link, if applicable.
       * </pre>
       *
       * <code>string alt = 2;</code>
       */
      public var alt: kotlin.String
        @JvmName("getAlt")
        get() = _builder.getAlt()
        @JvmName("setAlt")
        set(value) {
          _builder.setAlt(value)
        }
      /**
       * <pre>
       * Alternative text to display for this link, if applicable.
       * </pre>
       *
       * <code>string alt = 2;</code>
       */
      public fun clearAlt() {
        _builder.clearAlt()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeimage")
  public inline fun image(block: tools.elide.page.MediaAssetKt.ImageKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Image =
    tools.elide.page.MediaAssetKt.ImageKt.Dsl._create(tools.elide.page.MediaAsset.Image.newBuilder()).apply { block() }._build()
  public object ImageKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: tools.elide.page.MediaAsset.Image.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.MediaAsset.Image.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.MediaAsset.Image = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class AssetProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Concrete information regarding this image asset.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Image.ImageAsset asset = 1;</code>
       */
       public val asset: com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Image.ImageAsset, AssetProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getAssetList()
        )
      /**
       * <pre>
       * Concrete information regarding this image asset.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Image.ImageAsset asset = 1;</code>
       * @param value The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAsset")
      public fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Image.ImageAsset, AssetProxy>.add(value: tools.elide.page.MediaAsset.Image.ImageAsset) {
        _builder.addAsset(value)
      }
      /**
       * <pre>
       * Concrete information regarding this image asset.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Image.ImageAsset asset = 1;</code>
       * @param value The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAsset")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Image.ImageAsset, AssetProxy>.plusAssign(value: tools.elide.page.MediaAsset.Image.ImageAsset) {
        add(value)
      }
      /**
       * <pre>
       * Concrete information regarding this image asset.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Image.ImageAsset asset = 1;</code>
       * @param values The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllAsset")
      public fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Image.ImageAsset, AssetProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.MediaAsset.Image.ImageAsset>) {
        _builder.addAllAsset(values)
      }
      /**
       * <pre>
       * Concrete information regarding this image asset.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Image.ImageAsset asset = 1;</code>
       * @param values The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllAsset")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Image.ImageAsset, AssetProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.MediaAsset.Image.ImageAsset>) {
        addAll(values)
      }
      /**
       * <pre>
       * Concrete information regarding this image asset.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Image.ImageAsset asset = 1;</code>
       * @param index The index to set the value at.
       * @param value The asset to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setAsset")
      public operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Image.ImageAsset, AssetProxy>.set(index: kotlin.Int, value: tools.elide.page.MediaAsset.Image.ImageAsset) {
        _builder.setAsset(index, value)
      }
      /**
       * <pre>
       * Concrete information regarding this image asset.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Image.ImageAsset asset = 1;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearAsset")
      public fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Image.ImageAsset, AssetProxy>.clear() {
        _builder.clearAsset()
      }

    }
    @kotlin.jvm.JvmName("-initializeimageAsset")
    public inline fun imageAsset(block: tools.elide.page.MediaAssetKt.ImageKt.ImageAssetKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Image.ImageAsset =
      tools.elide.page.MediaAssetKt.ImageKt.ImageAssetKt.Dsl._create(tools.elide.page.MediaAsset.Image.ImageAsset.newBuilder()).apply { block() }._build()
    public object ImageAssetKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      public class Dsl private constructor(
        private val _builder: tools.elide.page.MediaAsset.Image.ImageAsset.Builder
      ) {
        public companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.MediaAsset.Image.ImageAsset.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.MediaAsset.Image.ImageAsset = _builder.build()

        /**
         * <pre>
         * Specifies the intended resolution of this image asset.
         * </pre>
         *
         * <code>float resolution = 1;</code>
         */
        public var resolution: kotlin.Float
          @JvmName("getResolution")
          get() = _builder.getResolution()
          @JvmName("setResolution")
          set(value) {
            _builder.setResolution(value)
          }
        /**
         * <pre>
         * Specifies the intended resolution of this image asset.
         * </pre>
         *
         * <code>float resolution = 1;</code>
         */
        public fun clearResolution() {
          _builder.clearResolution()
        }

        /**
         * <pre>
         * Specifies the kind of image attached as this asset.
         * </pre>
         *
         * <code>string mime = 2;</code>
         */
        public var mime: kotlin.String
          @JvmName("getMime")
          get() = _builder.getMime()
          @JvmName("setMime")
          set(value) {
            _builder.setMime(value)
          }
        /**
         * <pre>
         * Specifies the kind of image attached as this asset.
         * </pre>
         *
         * <code>string mime = 2;</code>
         */
        public fun clearMime() {
          _builder.clearMime()
        }

        /**
         * <pre>
         * Specifies the native width of this image asset.
         * </pre>
         *
         * <code>uint64 width = 3;</code>
         */
        public var width: kotlin.Long
          @JvmName("getWidth")
          get() = _builder.getWidth()
          @JvmName("setWidth")
          set(value) {
            _builder.setWidth(value)
          }
        /**
         * <pre>
         * Specifies the native width of this image asset.
         * </pre>
         *
         * <code>uint64 width = 3;</code>
         */
        public fun clearWidth() {
          _builder.clearWidth()
        }

        /**
         * <pre>
         * Specifies the native height of this image asset.
         * </pre>
         *
         * <code>uint64 height = 4;</code>
         */
        public var height: kotlin.Long
          @JvmName("getHeight")
          get() = _builder.getHeight()
          @JvmName("setHeight")
          set(value) {
            _builder.setHeight(value)
          }
        /**
         * <pre>
         * Specifies the native height of this image asset.
         * </pre>
         *
         * <code>uint64 height = 4;</code>
         */
        public fun clearHeight() {
          _builder.clearHeight()
        }

        /**
         * <pre>
         * Raw Base64 content to be embedded directly in an image tag.
         * </pre>
         *
         * <code>string b64 = 10;</code>
         */
        public var b64: kotlin.String
          @JvmName("getB64")
          get() = _builder.getB64()
          @JvmName("setB64")
          set(value) {
            _builder.setB64(value)
          }
        /**
         * <pre>
         * Raw Base64 content to be embedded directly in an image tag.
         * </pre>
         *
         * <code>string b64 = 10;</code>
         */
        public fun clearB64() {
          _builder.clearB64()
        }
        /**
         * <pre>
         * Raw Base64 content to be embedded directly in an image tag.
         * </pre>
         *
         * <code>string b64 = 10;</code>
         * @return Whether the b64 field is set.
         */
        public fun hasB64(): kotlin.Boolean {
          return _builder.hasB64()
        }

        /**
         * <pre>
         * URI to be used in reference to this image asset.
         * </pre>
         *
         * <code>string uri = 20;</code>
         */
        public var uri: kotlin.String
          @JvmName("getUri")
          get() = _builder.getUri()
          @JvmName("setUri")
          set(value) {
            _builder.setUri(value)
          }
        /**
         * <pre>
         * URI to be used in reference to this image asset.
         * </pre>
         *
         * <code>string uri = 20;</code>
         */
        public fun clearUri() {
          _builder.clearUri()
        }
        /**
         * <pre>
         * URI to be used in reference to this image asset.
         * </pre>
         *
         * <code>string uri = 20;</code>
         * @return Whether the uri field is set.
         */
        public fun hasUri(): kotlin.Boolean {
          return _builder.hasUri()
        }
        public val contentCase: tools.elide.page.MediaAsset.Image.ImageAsset.ContentCase
          @JvmName("getContentCase")
          get() = _builder.getContentCase()

        public fun clearContent() {
          _builder.clearContent()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializevideo")
  public inline fun video(block: tools.elide.page.MediaAssetKt.VideoKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Video =
    tools.elide.page.MediaAssetKt.VideoKt.Dsl._create(tools.elide.page.MediaAsset.Video.newBuilder()).apply { block() }._build()
  public object VideoKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: tools.elide.page.MediaAsset.Video.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.MediaAsset.Video.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.MediaAsset.Video = _builder.build()

      /**
       * <pre>
       * Describes where the video may be streamed from, or accessed.
       * </pre>
       *
       * <code>.page.VideoProvider provider = 1;</code>
       */
      public var provider: tools.elide.page.VideoProvider
        @JvmName("getProvider")
        get() = _builder.getProvider()
        @JvmName("setProvider")
        set(value) {
          _builder.setProvider(value)
        }
      /**
       * <pre>
       * Describes where the video may be streamed from, or accessed.
       * </pre>
       *
       * <code>.page.VideoProvider provider = 1;</code>
       */
      public fun clearProvider() {
        _builder.clearProvider()
      }

      /**
       * <pre>
       * Title to display for this video asset.
       * </pre>
       *
       * <code>string title = 2;</code>
       */
      public var title: kotlin.String
        @JvmName("getTitle")
        get() = _builder.getTitle()
        @JvmName("setTitle")
        set(value) {
          _builder.setTitle(value)
        }
      /**
       * <pre>
       * Title to display for this video asset.
       * </pre>
       *
       * <code>string title = 2;</code>
       */
      public fun clearTitle() {
        _builder.clearTitle()
      }

      /**
       * <pre>
       * Description for this video asset.
       * </pre>
       *
       * <code>string description = 3;</code>
       */
      public var description: kotlin.String
        @JvmName("getDescription")
        get() = _builder.getDescription()
        @JvmName("setDescription")
        set(value) {
          _builder.setDescription(value)
        }
      /**
       * <pre>
       * Description for this video asset.
       * </pre>
       *
       * <code>string description = 3;</code>
       */
      public fun clearDescription() {
        _builder.clearDescription()
      }

      /**
       * <pre>
       * Duration of the video asset, in milliseconds.
       * </pre>
       *
       * <code>uint64 run_time = 4;</code>
       */
      public var runTime: kotlin.Long
        @JvmName("getRunTime")
        get() = _builder.getRunTime()
        @JvmName("setRunTime")
        set(value) {
          _builder.setRunTime(value)
        }
      /**
       * <pre>
       * Duration of the video asset, in milliseconds.
       * </pre>
       *
       * <code>uint64 run_time = 4;</code>
       */
      public fun clearRunTime() {
        _builder.clearRunTime()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class AssetProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Describes the assets that back this video media.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Video.VideoAsset asset = 5;</code>
       */
       public val asset: com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Video.VideoAsset, AssetProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getAssetList()
        )
      /**
       * <pre>
       * Describes the assets that back this video media.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Video.VideoAsset asset = 5;</code>
       * @param value The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAsset")
      public fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Video.VideoAsset, AssetProxy>.add(value: tools.elide.page.MediaAsset.Video.VideoAsset) {
        _builder.addAsset(value)
      }
      /**
       * <pre>
       * Describes the assets that back this video media.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Video.VideoAsset asset = 5;</code>
       * @param value The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAsset")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Video.VideoAsset, AssetProxy>.plusAssign(value: tools.elide.page.MediaAsset.Video.VideoAsset) {
        add(value)
      }
      /**
       * <pre>
       * Describes the assets that back this video media.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Video.VideoAsset asset = 5;</code>
       * @param values The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllAsset")
      public fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Video.VideoAsset, AssetProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.MediaAsset.Video.VideoAsset>) {
        _builder.addAllAsset(values)
      }
      /**
       * <pre>
       * Describes the assets that back this video media.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Video.VideoAsset asset = 5;</code>
       * @param values The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllAsset")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Video.VideoAsset, AssetProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.MediaAsset.Video.VideoAsset>) {
        addAll(values)
      }
      /**
       * <pre>
       * Describes the assets that back this video media.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Video.VideoAsset asset = 5;</code>
       * @param index The index to set the value at.
       * @param value The asset to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setAsset")
      public operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Video.VideoAsset, AssetProxy>.set(index: kotlin.Int, value: tools.elide.page.MediaAsset.Video.VideoAsset) {
        _builder.setAsset(index, value)
      }
      /**
       * <pre>
       * Describes the assets that back this video media.
       * </pre>
       *
       * <code>repeated .page.MediaAsset.Video.VideoAsset asset = 5;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearAsset")
      public fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset.Video.VideoAsset, AssetProxy>.clear() {
        _builder.clearAsset()
      }

    }
    @kotlin.jvm.JvmName("-initializevideoAsset")
    public inline fun videoAsset(block: tools.elide.page.MediaAssetKt.VideoKt.VideoAssetKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Video.VideoAsset =
      tools.elide.page.MediaAssetKt.VideoKt.VideoAssetKt.Dsl._create(tools.elide.page.MediaAsset.Video.VideoAsset.newBuilder()).apply { block() }._build()
    public object VideoAssetKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      public class Dsl private constructor(
        private val _builder: tools.elide.page.MediaAsset.Video.VideoAsset.Builder
      ) {
        public companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.MediaAsset.Video.VideoAsset.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.MediaAsset.Video.VideoAsset = _builder.build()

        /**
         * <pre>
         * Resolutions at which a video might be available.
         * </pre>
         *
         * <code>.page.VideoResolution resolution = 1;</code>
         */
        public var resolution: tools.elide.page.VideoResolution
          @JvmName("getResolution")
          get() = _builder.getResolution()
          @JvmName("setResolution")
          set(value) {
            _builder.setResolution(value)
          }
        /**
         * <pre>
         * Resolutions at which a video might be available.
         * </pre>
         *
         * <code>.page.VideoResolution resolution = 1;</code>
         */
        public fun clearResolution() {
          _builder.clearResolution()
        }

        /**
         * <pre>
         * Image asset to be used as a thumbnail for this video asset.
         * </pre>
         *
         * <code>.page.MediaAsset.Image thumb = 2;</code>
         */
        public var thumb: tools.elide.page.MediaAsset.Image
          @JvmName("getThumb")
          get() = _builder.getThumb()
          @JvmName("setThumb")
          set(value) {
            _builder.setThumb(value)
          }
        /**
         * <pre>
         * Image asset to be used as a thumbnail for this video asset.
         * </pre>
         *
         * <code>.page.MediaAsset.Image thumb = 2;</code>
         */
        public fun clearThumb() {
          _builder.clearThumb()
        }
        /**
         * <pre>
         * Image asset to be used as a thumbnail for this video asset.
         * </pre>
         *
         * <code>.page.MediaAsset.Image thumb = 2;</code>
         * @return Whether the thumb field is set.
         */
        public fun hasThumb(): kotlin.Boolean {
          return _builder.hasThumb()
        }

        /**
         * <pre>
         * URI where the video may be streamed or accessed.
         * </pre>
         *
         * <code>string uri = 3;</code>
         */
        public var uri: kotlin.String
          @JvmName("getUri")
          get() = _builder.getUri()
          @JvmName("setUri")
          set(value) {
            _builder.setUri(value)
          }
        /**
         * <pre>
         * URI where the video may be streamed or accessed.
         * </pre>
         *
         * <code>string uri = 3;</code>
         */
        public fun clearUri() {
          _builder.clearUri()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializedocument")
  public inline fun document(block: tools.elide.page.MediaAssetKt.DocumentKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Document =
    tools.elide.page.MediaAssetKt.DocumentKt.Dsl._create(tools.elide.page.MediaAsset.Document.newBuilder()).apply { block() }._build()
  public object DocumentKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: tools.elide.page.MediaAsset.Document.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.MediaAsset.Document.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.MediaAsset.Document = _builder.build()

      /**
       * <pre>
       * Specifies the type of document.
       * </pre>
       *
       * <code>.page.MediaAsset.Document.DocumentType type = 1;</code>
       */
      public var type: tools.elide.page.MediaAsset.Document.DocumentType
        @JvmName("getType")
        get() = _builder.getType()
        @JvmName("setType")
        set(value) {
          _builder.setType(value)
        }
      /**
       * <pre>
       * Specifies the type of document.
       * </pre>
       *
       * <code>.page.MediaAsset.Document.DocumentType type = 1;</code>
       */
      public fun clearType() {
        _builder.clearType()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.page.MediaAsset.copy(block: tools.elide.page.MediaAssetKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset =
  tools.elide.page.MediaAssetKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.page.MediaAsset.Link.copy(block: tools.elide.page.MediaAssetKt.LinkKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Link =
  tools.elide.page.MediaAssetKt.LinkKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.page.MediaAsset.Image.copy(block: tools.elide.page.MediaAssetKt.ImageKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Image =
  tools.elide.page.MediaAssetKt.ImageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.page.MediaAsset.Image.ImageAsset.copy(block: tools.elide.page.MediaAssetKt.ImageKt.ImageAssetKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Image.ImageAsset =
  tools.elide.page.MediaAssetKt.ImageKt.ImageAssetKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.page.MediaAsset.Video.copy(block: tools.elide.page.MediaAssetKt.VideoKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Video =
  tools.elide.page.MediaAssetKt.VideoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.page.MediaAsset.Video.VideoAsset.copy(block: tools.elide.page.MediaAssetKt.VideoKt.VideoAssetKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Video.VideoAsset =
  tools.elide.page.MediaAssetKt.VideoKt.VideoAssetKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.MediaAsset.Video.VideoAssetOrBuilder.thumbOrNull: tools.elide.page.MediaAsset.Image?
  get() = if (hasThumb()) getThumb() else null

@kotlin.jvm.JvmSynthetic
public inline fun tools.elide.page.MediaAsset.Document.copy(block: tools.elide.page.MediaAssetKt.DocumentKt.Dsl.() -> kotlin.Unit): tools.elide.page.MediaAsset.Document =
  tools.elide.page.MediaAssetKt.DocumentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.MediaAssetOrBuilder.linkOrNull: tools.elide.page.MediaAsset.Link?
  get() = if (hasLink()) getLink() else null

val tools.elide.page.MediaAssetOrBuilder.imageOrNull: tools.elide.page.MediaAsset.Image?
  get() = if (hasImage()) getImage() else null

val tools.elide.page.MediaAssetOrBuilder.videoOrNull: tools.elide.page.MediaAsset.Video?
  get() = if (hasVideo()) getVideo() else null

