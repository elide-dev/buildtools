// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elide/model/model.proto

package tools.elide.model;

/**
 * <pre>
 * Enumerates field handling special-cases. Fields may be annotated with these special types to change the way they are
 * handled by the model mapping layer.
 * </pre>
 *
 * Protobuf enum {@code model.FieldType}
 */
public enum FieldType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * This is a standard field (default value).
   * </pre>
   *
   * <code>STANDARD = 0;</code>
   */
  STANDARD(0),
  /**
   * <pre>
   * This is a key field (a primary key sub-message) for a GROUP or COLLECTION-mode message.
   * </pre>
   *
   * <code>KEY = 1;</code>
   */
  KEY(1),
  /**
   * <pre>
   * This is an ID field that should be used as the final name of this document.
   * </pre>
   *
   * <code>ID = 2;</code>
   */
  ID(2),
  /**
   * <pre>
   * This is a tags-style field.
   * </pre>
   *
   * <code>TAGS = 3;</code>
   */
  TAGS(3),
  /**
   * <pre>
   * Store this object as a special flags-style mapping.
   * </pre>
   *
   * <code>FLAGS = 4;</code>
   */
  FLAGS(4),
  /**
   * <pre>
   * This key is a foreign reference.
   * </pre>
   *
   * <code>REFERENCE = 5;</code>
   */
  REFERENCE(5),
  /**
   * <pre>
   * This item is a timestamp.
   * </pre>
   *
   * <code>TIMESTAMP = 6;</code>
   */
  TIMESTAMP(6),
  /**
   * <pre>
   * This field represents a key for this item's parent.
   * </pre>
   *
   * <code>PARENT = 7;</code>
   */
  PARENT(7),
  /**
   * <pre>
   * This field represents a full key path in hierarchical storage.
   * </pre>
   *
   * <code>PATH = 8;</code>
   */
  PATH(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * This is a standard field (default value).
   * </pre>
   *
   * <code>STANDARD = 0;</code>
   */
  public static final int STANDARD_VALUE = 0;
  /**
   * <pre>
   * This is a key field (a primary key sub-message) for a GROUP or COLLECTION-mode message.
   * </pre>
   *
   * <code>KEY = 1;</code>
   */
  public static final int KEY_VALUE = 1;
  /**
   * <pre>
   * This is an ID field that should be used as the final name of this document.
   * </pre>
   *
   * <code>ID = 2;</code>
   */
  public static final int ID_VALUE = 2;
  /**
   * <pre>
   * This is a tags-style field.
   * </pre>
   *
   * <code>TAGS = 3;</code>
   */
  public static final int TAGS_VALUE = 3;
  /**
   * <pre>
   * Store this object as a special flags-style mapping.
   * </pre>
   *
   * <code>FLAGS = 4;</code>
   */
  public static final int FLAGS_VALUE = 4;
  /**
   * <pre>
   * This key is a foreign reference.
   * </pre>
   *
   * <code>REFERENCE = 5;</code>
   */
  public static final int REFERENCE_VALUE = 5;
  /**
   * <pre>
   * This item is a timestamp.
   * </pre>
   *
   * <code>TIMESTAMP = 6;</code>
   */
  public static final int TIMESTAMP_VALUE = 6;
  /**
   * <pre>
   * This field represents a key for this item's parent.
   * </pre>
   *
   * <code>PARENT = 7;</code>
   */
  public static final int PARENT_VALUE = 7;
  /**
   * <pre>
   * This field represents a full key path in hierarchical storage.
   * </pre>
   *
   * <code>PATH = 8;</code>
   */
  public static final int PATH_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FieldType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static FieldType forNumber(int value) {
    switch (value) {
      case 0: return STANDARD;
      case 1: return KEY;
      case 2: return ID;
      case 3: return TAGS;
      case 4: return FLAGS;
      case 5: return REFERENCE;
      case 6: return TIMESTAMP;
      case 7: return PARENT;
      case 8: return PATH;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FieldType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FieldType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FieldType>() {
          public FieldType findValueByNumber(int number) {
            return FieldType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return tools.elide.model.Datamodel.getDescriptor().getEnumTypes().get(2);
  }

  private static final FieldType[] VALUES = values();

  public static FieldType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FieldType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:model.FieldType)
}

